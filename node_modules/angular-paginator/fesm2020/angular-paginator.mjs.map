{"version":3,"file":"angular-paginator.mjs","sources":["../../../projects/angular-paginator/src/lib/services/angular-paginator.service.ts","../../../projects/angular-paginator/src/lib/pipes/angular-paginator.pipe.ts","../../../projects/angular-paginator/src/lib/directives/angular-paginator.directive.ts","../../../projects/angular-paginator/src/lib/angular-paginator.module.ts","../../../projects/angular-paginator/src/public-api.ts","../../../projects/angular-paginator/src/angular-paginator.ts"],"sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\n\nimport { AngularPaginatorInstance } from '../others/angular-paginator.interface';\n\n@Injectable()\nexport class AngularPaginatorService {\n  /** id is used to identify pagination instances */\n  static id = 'ANGULAR_PAGINATOR_DEFAULT';\n\n  /** instances is the collection of pagination componetns */\n  instances: Record<string, AngularPaginatorInstance> = {};\n\n  /** emits an event with instance id whenever the page number changes */\n  change: EventEmitter<string> = new EventEmitter<string>();\n\n  /**\n   * creates an instance for every pipe differentiated with id\n   *\n   * @param instance each instance refers to a unique pagination component\n   */\n  registerInstance(instance: AngularPaginatorInstance): void {\n    if (!this.instances[instance.id]) {\n      this.instances[instance.id] = instance;\n      this.change.emit(instance.id);\n    } else {\n      const changed = this.updateInstance(instance);\n      if (changed) {\n        this.change.emit(instance.id);\n      }\n    }\n  }\n\n  /**\n   * updates existing pagination instances available\n   * and returns true if value has changed\n   *\n   * @param instance an unique pagination component\n   */\n  private updateInstance(instance: AngularPaginatorInstance): boolean {\n    let updated = false;\n    const currentInstance = this.instances[instance.id];\n\n    for (const [k, v] of Object.entries(instance)) {\n      const key = k as keyof AngularPaginatorInstance;\n\n      if (\n        key !== 'id'\n        && currentInstance[k as keyof AngularPaginatorInstance] !== v\n        && !updated\n      ) {\n        this.instances[instance.id] = {\n          ...instance,\n          id: instance.id,\n        };\n        updated = true;\n      }\n    }\n\n    return updated;\n  }\n\n  /**\n   * return instance with given id\n   *\n   * @param id unique id of the pagination component\n   */\n  getInstance(id: string): AngularPaginatorInstance {\n    return this.instances[id];\n  }\n\n  /**\n   * return currentPage for given id\n   *\n   * @param id unique id of the pagination component\n   */\n  getCurrentPage(id: string): number {\n    return this.instances[id].currentPage;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { AngularPaginatorService } from '../services/angular-paginator.service';\nimport { AngularPaginatorInstance, PaginatorPipeArgs } from '../others/angular-paginator.interface';\n\n/**\n * Pagination Pipe which paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`\n */\n@Pipe({\n  name: 'angularPaginator',\n})\n\nexport class AngularPaginatorPipe implements PipeTransform {\n  /**\n   *\n   * @param angularPaginatorService service for angular pagiantor\n   */\n  constructor(private angularPaginatorService: AngularPaginatorService) { }\n\n  /**\n   * this pipes paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`\n   *\n   * @param array input array for which the manipulation happens\n   * @param args input arguments for the paginator pipe\n   */\n  transform<T>(array: Array<T>, args?: PaginatorPipeArgs): Array<T> {\n    const instance: AngularPaginatorInstance = this.createInstance(array, args);\n\n    // create pagination information\n    this.angularPaginatorService.registerInstance(instance);\n\n    // set the slicing range\n    const start = (instance.currentPage - 1) * instance.itemsPerPage;\n    const end = instance.currentPage * instance.itemsPerPage;\n\n    return array.slice(start, end);\n  }\n\n  /**\n   * create an instance for each pipe\n   *\n   * @param array input array for which the manipulation happens\n   * @param args input arguments for the paginator pipe\n   */\n  private createInstance(array: unknown[], args?: PaginatorPipeArgs): AngularPaginatorInstance {\n    return {\n      id: args?.id ? args.id : AngularPaginatorService.id,\n      currentPage: args?.currentPage ? args.currentPage : 1,\n      itemsPerPage: args?.itemsPerPage ? args.itemsPerPage : 10,\n      totalItems: array.length,\n    };\n  }\n}\n","import {\n  Directive, OnInit, OnDestroy, Input, Output, EventEmitter,\n} from '@angular/core';\nimport { AngularPaginatorService } from '../services/angular-paginator.service';\nimport { AngularPaginatorInstance, Page } from '../others/angular-paginator.interface';\nimport { Subscription } from 'rxjs';\n\n/**\n * This is the directive where the actual pagination takes place, it provides a sync between the\n * pipes and the pagination component\n */\n@Directive({\n  selector: 'angularPaginator, [angularPaginator]',\n  exportAs: 'angularPaginator',\n})\n\nexport class AngularPaginatorDirective implements OnInit, OnDestroy {\n  /**\n   * Use unique id when multiple paginations are being used on the same page.\n   * By Default Paginator uses id `ANGULAR_PAGINATOR_DEFAULT`\n   */\n  @Input() id: string = AngularPaginatorService.id;\n\n  /**\n   * Limit number for pagination size, i.e., the maximum page numbers to be displayed\n   */\n  @Input() maxSize?: number;\n\n  /**\n   * Whether to keep current page in the middle of the visible ones\n   */\n  @Input() rotate = false;\n\n  /**\n   * Whether to always display the first and last page numbers.\n   * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses\n   * in-between as necessary. NOTE: max-size refers to the center of the range.\n   * This option may add up to 2 more numbers on each side of the displayed range for the end value and\n   * what would be an ellipsis but is replaced by a number because it is sequential\n   */\n  @Input() boundaryLinkNumbers = false;\n\n  /**\n   * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses\n   */\n  @Input() forceEllipses = false;\n\n  currentPage!: number;\n  firstPage = 1;\n  lastPage!: number;\n  pages: Page[] = [];\n\n  private subscription: Subscription;\n\n  /**\n   * Emits an event whenever the current page is changed, It emits the current page number\n   */\n  @Output() pageChange: EventEmitter<number> = new EventEmitter<number>(true);\n\n  /**\n   *\n   * @param angularPaginatorService serivce for angular paginator\n   */\n  constructor(private angularPaginatorService: AngularPaginatorService) {\n    // subscribe to changes\n    this.subscription = this.angularPaginatorService.change.subscribe((id: string) => {\n      if (id === this.id) {\n        this.updatePages();\n      }\n    });\n  }\n\n  /**\n   * Navigate to prevoius page\n   */\n  toPreviousPage(): void {\n    if (this.currentPage > this.firstPage) {\n      this.setPage(this.currentPage - 1);\n    }\n  }\n\n  /**\n   * Navigate to next page\n   */\n  toNextPage(): void {\n    if (this.currentPage < this.lastPage) {\n      this.setPage(this.currentPage + 1);\n    }\n  }\n\n  /**\n   * Navigate to first page\n   */\n  toFirstPage(): void {\n    this.setPage(this.firstPage);\n  }\n\n  /**\n   * Navigate to last page\n   */\n  toLastPage(): void {\n    this.setPage(this.lastPage);\n  }\n\n  /**\n   * Sets current page\n   *\n   * @param page page number to set as currentPage\n   */\n  setCurrentPage(page: number): void {\n    this.setPage(page);\n  }\n\n  /**\n   *\n   * @param page  page number to set\n   */\n  private setPage(page: number): void {\n    if (page && this.currentPage !== page) {\n      this.currentPage = page;\n      this.pageChange.emit(page);\n    }\n  }\n\n  /**\n   * create page object used for template\n   *\n   * @param pageNumber page number\n   * @param text page number, text to be displayed\n   * @param isActive whether the page is active or not, true for currentPage\n   */\n  private makePage(pageNumber: number, text: string, isActive: boolean): Page {\n    return {\n      number: pageNumber,\n      text,\n      active: isActive,\n    };\n  }\n\n  /**\n   *  computes the page limit\n   *\n   * @param currentPage current page number\n   * @param itemsPerPage total items per page\n   * @param totalItems no of items for pagination, usually array length\n   */\n  private computePageLimits(currentPage: number, totalItems: number, itemsPerPage: number) {\n    const totalPages = Math.ceil(totalItems / itemsPerPage);\n\n    // Default page limits\n    let startPage = 1;\n    let endPage = totalPages;\n\n    const isMaxSized = this.maxSize ? this.maxSize < totalPages : false;\n\n    // recompute if maxSize\n    if (isMaxSized && this.maxSize) {\n      if (this.rotate) {\n        // current page is displayed in the middle of the visible ones\n        startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);\n        endPage = startPage + this.maxSize - 1;\n\n        // Adjust if limit is exceeded\n        if (endPage > totalPages) {\n          endPage = totalPages;\n          startPage = endPage - this.maxSize + 1;\n        }\n      } else {\n        // Visible pages are paginated with maxSize\n        startPage = ((Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize) + 1;\n\n        // adjust last page if limit is exceeded\n        endPage = Math.min(startPage + this.maxSize - 1, totalPages);\n      }\n    }\n\n    return {\n      startPage,\n      endPage,\n      totalPages,\n      isMaxSized,\n    };\n  }\n\n  /**\n   *  create page array\n   *\n   * @param currentPage current page number\n   * @param itemsPerPage total items per page\n   * @param totalItems no of items for pagination, usually array length\n   */\n  private getPages(currentPage: number, itemsPerPage: number, totalItems: number): Page[] {\n    const pages: Page[] = [];\n\n    const pageLimits = this.computePageLimits(currentPage, totalItems, itemsPerPage);\n    const { startPage, endPage, totalPages, isMaxSized } = pageLimits;\n\n    this.lastPage = totalPages;\n\n    // add page number links\n    for (let pageNumber = startPage; pageNumber <= endPage; pageNumber += 1) {\n      const page = this.makePage(pageNumber, pageNumber.toString(), pageNumber === currentPage);\n      pages.push(page);\n    }\n\n    // add links to move between page sets\n    if (\n      isMaxSized\n      && (this.maxSize && this.maxSize > 0)\n      && (!this.rotate || this.forceEllipses || this.boundaryLinkNumbers)\n    ) {\n      if (startPage > 1) {\n        // need ellipsis for all options unless range is too close to beginning\n        if (!this.boundaryLinkNumbers || startPage > 3) {\n          const previousPageSet = this.makePage(startPage - 1, '...', false);\n          pages.unshift(previousPageSet);\n        }\n\n        if (this.boundaryLinkNumbers) {\n          if (startPage === 3) { // need to replace ellipsis when the buttons would be sequential\n            const secondPageLink = this.makePage(2, '2', false);\n            pages.unshift(secondPageLink);\n          }\n\n          // add the first page\n          const firstPageLink = this.makePage(1, '1', false);\n          pages.unshift(firstPageLink);\n        }\n      }\n\n      if (endPage < totalPages) {\n        // need ellipsis for all options unless range is too close to end\n        if (!this.boundaryLinkNumbers || endPage < totalPages - 2) {\n          const nextPageSet = this.makePage(endPage + 1, '...', false);\n          pages.push(nextPageSet);\n        }\n\n        if (this.boundaryLinkNumbers) {\n          // need to replace ellipsis when the buttons would be sequential\n          if (endPage === totalPages - 2) {\n            const secondToLastPageLink = this.makePage(totalPages - 1, (totalPages - 1).toString(), false);\n            pages.push(secondToLastPageLink);\n          }\n\n          // add the last page\n          const lastPageLink = this.makePage(totalPages, totalPages.toString(), false);\n          pages.push(lastPageLink);\n        }\n      }\n    }\n    return pages;\n  }\n\n  /**\n   * Updates the pagination component\n   */\n  private updatePages(): void {\n    const instance: AngularPaginatorInstance = this.angularPaginatorService.getInstance(this.id);\n\n    const correctedCurrentPage = this.outOfBoundCorrection(instance);\n\n    if (correctedCurrentPage !== instance.currentPage || this.currentPage !== instance.currentPage) {\n      this.setPage(correctedCurrentPage);\n    }\n\n    this.pages = this.getPages(instance.currentPage, instance.itemsPerPage, instance.totalItems);\n  }\n\n  /**\n   * Check if currentPage is out of bound with totalPages\n   *\n   * @param instance instance for which the range is to be corrected\n   */\n  private outOfBoundCorrection(instance: AngularPaginatorInstance): number {\n    const totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\n\n    if (totalPages < instance.currentPage && totalPages > 0) {\n      return totalPages;\n    } else if (instance.currentPage < 1) {\n      return 1;\n    }\n\n    return instance.currentPage;\n  }\n\n  /**\n   * check if there is any instance registered with the id\n   */\n  isValidId(): void {\n    if (!this.angularPaginatorService.getInstance(this.id)) {\n      throw new Error(`There is no instance registered with id \\`${this.id}\\``);\n    }\n  }\n\n  ngOnInit(): void {\n    this.isValidId();\n    this.updatePages();\n  }\n\n  ngOnDestroy(): void {\n    /** destroy the subscription when the directive is destroyed */\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AngularPaginatorPipe } from './pipes/angular-paginator.pipe';\nimport { AngularPaginatorDirective } from './directives/angular-paginator.directive';\nimport { AngularPaginatorService } from './services/angular-paginator.service';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [AngularPaginatorService],\n  declarations: [AngularPaginatorPipe, AngularPaginatorDirective],\n  exports: [AngularPaginatorDirective, AngularPaginatorPipe],\n})\n\nexport class AngularPaginatorModule { }\n","/*\n * Public API Surface of angular-paginator\n */\n\nexport * from './lib/angular-paginator.module';\nexport * from './lib/pipes/angular-paginator.pipe';\nexport * from './lib/directives/angular-paginator.directive';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.AngularPaginatorService"],"mappings":"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"}