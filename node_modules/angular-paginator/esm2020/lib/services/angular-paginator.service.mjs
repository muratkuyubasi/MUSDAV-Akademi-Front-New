import { Injectable, EventEmitter } from '@angular/core';
import * as i0 from "@angular/core";
export class AngularPaginatorService {
    constructor() {
        /** instances is the collection of pagination componetns */
        this.instances = {};
        /** emits an event with instance id whenever the page number changes */
        this.change = new EventEmitter();
    }
    /**
     * creates an instance for every pipe differentiated with id
     *
     * @param instance each instance refers to a unique pagination component
     */
    registerInstance(instance) {
        if (!this.instances[instance.id]) {
            this.instances[instance.id] = instance;
            this.change.emit(instance.id);
        }
        else {
            const changed = this.updateInstance(instance);
            if (changed) {
                this.change.emit(instance.id);
            }
        }
    }
    /**
     * updates existing pagination instances available
     * and returns true if value has changed
     *
     * @param instance an unique pagination component
     */
    updateInstance(instance) {
        let updated = false;
        const currentInstance = this.instances[instance.id];
        for (const [k, v] of Object.entries(instance)) {
            const key = k;
            if (key !== 'id'
                && currentInstance[k] !== v
                && !updated) {
                this.instances[instance.id] = {
                    ...instance,
                    id: instance.id,
                };
                updated = true;
            }
        }
        return updated;
    }
    /**
     * return instance with given id
     *
     * @param id unique id of the pagination component
     */
    getInstance(id) {
        return this.instances[id];
    }
    /**
     * return currentPage for given id
     *
     * @param id unique id of the pagination component
     */
    getCurrentPage(id) {
        return this.instances[id].currentPage;
    }
}
/** id is used to identify pagination instances */
AngularPaginatorService.id = 'ANGULAR_PAGINATOR_DEFAULT';
AngularPaginatorService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: AngularPaginatorService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
AngularPaginatorService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: AngularPaginatorService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: AngularPaginatorService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1wYWdpbmF0b3Iuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItcGFnaW5hdG9yL3NyYy9saWIvc2VydmljZXMvYW5ndWxhci1wYWdpbmF0b3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFLekQsTUFBTSxPQUFPLHVCQUF1QjtJQURwQztRQUtFLDJEQUEyRDtRQUMzRCxjQUFTLEdBQTZDLEVBQUUsQ0FBQztRQUV6RCx1RUFBdUU7UUFDdkUsV0FBTSxHQUF5QixJQUFJLFlBQVksRUFBVSxDQUFDO0tBaUUzRDtJQS9EQzs7OztPQUlHO0lBQ0gsZ0JBQWdCLENBQUMsUUFBa0M7UUFDakQsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQztZQUN2QyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDL0I7YUFBTTtZQUNMLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDOUMsSUFBSSxPQUFPLEVBQUU7Z0JBQ1gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQy9CO1NBQ0Y7SUFDSCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSyxjQUFjLENBQUMsUUFBa0M7UUFDdkQsSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRXBELEtBQUssTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQzdDLE1BQU0sR0FBRyxHQUFHLENBQW1DLENBQUM7WUFFaEQsSUFDRSxHQUFHLEtBQUssSUFBSTttQkFDVCxlQUFlLENBQUMsQ0FBbUMsQ0FBQyxLQUFLLENBQUM7bUJBQzFELENBQUMsT0FBTyxFQUNYO2dCQUNBLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxHQUFHO29CQUM1QixHQUFHLFFBQVE7b0JBQ1gsRUFBRSxFQUFFLFFBQVEsQ0FBQyxFQUFFO2lCQUNoQixDQUFDO2dCQUNGLE9BQU8sR0FBRyxJQUFJLENBQUM7YUFDaEI7U0FDRjtRQUVELE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsV0FBVyxDQUFDLEVBQVU7UUFDcEIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsY0FBYyxDQUFDLEVBQVU7UUFDdkIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQztJQUN4QyxDQUFDOztBQXZFRCxrREFBa0Q7QUFDM0MsMEJBQUUsR0FBRywyQkFBMkIsQ0FBQztvSEFGN0IsdUJBQXVCO3dIQUF2Qix1QkFBdUI7MkZBQXZCLHVCQUF1QjtrQkFEbkMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBBbmd1bGFyUGFnaW5hdG9ySW5zdGFuY2UgfSBmcm9tICcuLi9vdGhlcnMvYW5ndWxhci1wYWdpbmF0b3IuaW50ZXJmYWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFuZ3VsYXJQYWdpbmF0b3JTZXJ2aWNlIHtcbiAgLyoqIGlkIGlzIHVzZWQgdG8gaWRlbnRpZnkgcGFnaW5hdGlvbiBpbnN0YW5jZXMgKi9cbiAgc3RhdGljIGlkID0gJ0FOR1VMQVJfUEFHSU5BVE9SX0RFRkFVTFQnO1xuXG4gIC8qKiBpbnN0YW5jZXMgaXMgdGhlIGNvbGxlY3Rpb24gb2YgcGFnaW5hdGlvbiBjb21wb25ldG5zICovXG4gIGluc3RhbmNlczogUmVjb3JkPHN0cmluZywgQW5ndWxhclBhZ2luYXRvckluc3RhbmNlPiA9IHt9O1xuXG4gIC8qKiBlbWl0cyBhbiBldmVudCB3aXRoIGluc3RhbmNlIGlkIHdoZW5ldmVyIHRoZSBwYWdlIG51bWJlciBjaGFuZ2VzICovXG4gIGNoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz4gPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcblxuICAvKipcbiAgICogY3JlYXRlcyBhbiBpbnN0YW5jZSBmb3IgZXZlcnkgcGlwZSBkaWZmZXJlbnRpYXRlZCB3aXRoIGlkXG4gICAqXG4gICAqIEBwYXJhbSBpbnN0YW5jZSBlYWNoIGluc3RhbmNlIHJlZmVycyB0byBhIHVuaXF1ZSBwYWdpbmF0aW9uIGNvbXBvbmVudFxuICAgKi9cbiAgcmVnaXN0ZXJJbnN0YW5jZShpbnN0YW5jZTogQW5ndWxhclBhZ2luYXRvckluc3RhbmNlKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmluc3RhbmNlc1tpbnN0YW5jZS5pZF0pIHtcbiAgICAgIHRoaXMuaW5zdGFuY2VzW2luc3RhbmNlLmlkXSA9IGluc3RhbmNlO1xuICAgICAgdGhpcy5jaGFuZ2UuZW1pdChpbnN0YW5jZS5pZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGNoYW5nZWQgPSB0aGlzLnVwZGF0ZUluc3RhbmNlKGluc3RhbmNlKTtcbiAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlLmVtaXQoaW5zdGFuY2UuaWQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiB1cGRhdGVzIGV4aXN0aW5nIHBhZ2luYXRpb24gaW5zdGFuY2VzIGF2YWlsYWJsZVxuICAgKiBhbmQgcmV0dXJucyB0cnVlIGlmIHZhbHVlIGhhcyBjaGFuZ2VkXG4gICAqXG4gICAqIEBwYXJhbSBpbnN0YW5jZSBhbiB1bmlxdWUgcGFnaW5hdGlvbiBjb21wb25lbnRcbiAgICovXG4gIHByaXZhdGUgdXBkYXRlSW5zdGFuY2UoaW5zdGFuY2U6IEFuZ3VsYXJQYWdpbmF0b3JJbnN0YW5jZSk6IGJvb2xlYW4ge1xuICAgIGxldCB1cGRhdGVkID0gZmFsc2U7XG4gICAgY29uc3QgY3VycmVudEluc3RhbmNlID0gdGhpcy5pbnN0YW5jZXNbaW5zdGFuY2UuaWRdO1xuXG4gICAgZm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoaW5zdGFuY2UpKSB7XG4gICAgICBjb25zdCBrZXkgPSBrIGFzIGtleW9mIEFuZ3VsYXJQYWdpbmF0b3JJbnN0YW5jZTtcblxuICAgICAgaWYgKFxuICAgICAgICBrZXkgIT09ICdpZCdcbiAgICAgICAgJiYgY3VycmVudEluc3RhbmNlW2sgYXMga2V5b2YgQW5ndWxhclBhZ2luYXRvckluc3RhbmNlXSAhPT0gdlxuICAgICAgICAmJiAhdXBkYXRlZFxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuaW5zdGFuY2VzW2luc3RhbmNlLmlkXSA9IHtcbiAgICAgICAgICAuLi5pbnN0YW5jZSxcbiAgICAgICAgICBpZDogaW5zdGFuY2UuaWQsXG4gICAgICAgIH07XG4gICAgICAgIHVwZGF0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB1cGRhdGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIHJldHVybiBpbnN0YW5jZSB3aXRoIGdpdmVuIGlkXG4gICAqXG4gICAqIEBwYXJhbSBpZCB1bmlxdWUgaWQgb2YgdGhlIHBhZ2luYXRpb24gY29tcG9uZW50XG4gICAqL1xuICBnZXRJbnN0YW5jZShpZDogc3RyaW5nKTogQW5ndWxhclBhZ2luYXRvckluc3RhbmNlIHtcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZXNbaWRdO1xuICB9XG5cbiAgLyoqXG4gICAqIHJldHVybiBjdXJyZW50UGFnZSBmb3IgZ2l2ZW4gaWRcbiAgICpcbiAgICogQHBhcmFtIGlkIHVuaXF1ZSBpZCBvZiB0aGUgcGFnaW5hdGlvbiBjb21wb25lbnRcbiAgICovXG4gIGdldEN1cnJlbnRQYWdlKGlkOiBzdHJpbmcpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmluc3RhbmNlc1tpZF0uY3VycmVudFBhZ2U7XG4gIH1cbn1cbiJdfQ==