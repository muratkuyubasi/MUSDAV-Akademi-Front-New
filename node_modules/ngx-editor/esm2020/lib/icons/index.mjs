/* eslint-disable @typescript-eslint/naming-convention */
// Icons source: https://material.io/
import bold from './bold';
import italic from './italic';
import code from './code';
import underline from './underline';
import strike from './strike';
import orderedList from './ordered_list';
import bulletList from './bullet_list';
import quote from './quote';
import link from './link';
import unlink from './unlink';
import image from './image';
import alignLeft from './align_left';
import alignCenter from './align_center';
import alignRight from './align_right';
import alignJustify from './align_justify';
import textColor from './text_color';
import colorFill from './color_fill';
import horizontalRule from './horizontal_rule';
import formatClear from './format_clear';
const DEFAULT_ICON_HEIGHT = 20;
const DEFAULT_ICON_WIDTH = 20;
const DEFAULT_ICON_FILL = 'currentColor';
export const icons = {
    bold,
    italic,
    code,
    underline,
    strike,
    ordered_list: orderedList,
    bullet_list: bulletList,
    blockquote: quote,
    link,
    unlink,
    image,
    align_left: alignLeft,
    align_center: alignCenter,
    align_right: alignRight,
    align_justify: alignJustify,
    text_color: textColor,
    color_fill: colorFill,
    horizontal_rule: horizontalRule,
    format_clear: formatClear,
    path: '<path></path>',
};
class Icon {
    static get(name, fill = DEFAULT_ICON_FILL) {
        const fullPath = icons[name];
        if (fullPath && (fullPath.includes('<path') || fullPath.includes('<g'))) {
            return `
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill=${fill}
          height=${DEFAULT_ICON_HEIGHT}
          width=${DEFAULT_ICON_WIDTH}
        >
          ${fullPath}
        </svg>
      `;
        }
        return fullPath;
    }
}
export default Icon;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZWRpdG9yL3NyYy9saWIvaWNvbnMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEseURBQXlEO0FBQ3pELHFDQUFxQztBQUVyQyxPQUFPLElBQUksTUFBTSxRQUFRLENBQUM7QUFDMUIsT0FBTyxNQUFNLE1BQU0sVUFBVSxDQUFDO0FBQzlCLE9BQU8sSUFBSSxNQUFNLFFBQVEsQ0FBQztBQUMxQixPQUFPLFNBQVMsTUFBTSxhQUFhLENBQUM7QUFDcEMsT0FBTyxNQUFNLE1BQU0sVUFBVSxDQUFDO0FBQzlCLE9BQU8sV0FBVyxNQUFNLGdCQUFnQixDQUFDO0FBQ3pDLE9BQU8sVUFBVSxNQUFNLGVBQWUsQ0FBQztBQUN2QyxPQUFPLEtBQUssTUFBTSxTQUFTLENBQUM7QUFDNUIsT0FBTyxJQUFJLE1BQU0sUUFBUSxDQUFDO0FBQzFCLE9BQU8sTUFBTSxNQUFNLFVBQVUsQ0FBQztBQUM5QixPQUFPLEtBQUssTUFBTSxTQUFTLENBQUM7QUFDNUIsT0FBTyxTQUFTLE1BQU0sY0FBYyxDQUFDO0FBQ3JDLE9BQU8sV0FBVyxNQUFNLGdCQUFnQixDQUFDO0FBQ3pDLE9BQU8sVUFBVSxNQUFNLGVBQWUsQ0FBQztBQUN2QyxPQUFPLFlBQVksTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLFNBQVMsTUFBTSxjQUFjLENBQUM7QUFDckMsT0FBTyxTQUFTLE1BQU0sY0FBYyxDQUFDO0FBQ3JDLE9BQU8sY0FBYyxNQUFNLG1CQUFtQixDQUFDO0FBQy9DLE9BQU8sV0FBVyxNQUFNLGdCQUFnQixDQUFDO0FBRXpDLE1BQU0sbUJBQW1CLEdBQUcsRUFBRSxDQUFDO0FBQy9CLE1BQU0sa0JBQWtCLEdBQUcsRUFBRSxDQUFDO0FBQzlCLE1BQU0saUJBQWlCLEdBQUcsY0FBYyxDQUFDO0FBRXpDLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBd0I7SUFDeEMsSUFBSTtJQUNKLE1BQU07SUFDTixJQUFJO0lBQ0osU0FBUztJQUNULE1BQU07SUFDTixZQUFZLEVBQUUsV0FBVztJQUN6QixXQUFXLEVBQUUsVUFBVTtJQUN2QixVQUFVLEVBQUUsS0FBSztJQUNqQixJQUFJO0lBQ0osTUFBTTtJQUNOLEtBQUs7SUFDTCxVQUFVLEVBQUUsU0FBUztJQUNyQixZQUFZLEVBQUUsV0FBVztJQUN6QixXQUFXLEVBQUUsVUFBVTtJQUN2QixhQUFhLEVBQUUsWUFBWTtJQUMzQixVQUFVLEVBQUUsU0FBUztJQUNyQixVQUFVLEVBQUUsU0FBUztJQUNyQixlQUFlLEVBQUUsY0FBYztJQUMvQixZQUFZLEVBQUUsV0FBVztJQUN6QixJQUFJLEVBQUUsZUFBZTtDQUN0QixDQUFDO0FBSUYsTUFBTSxJQUFJO0lBQ1IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUF3QixFQUFFLElBQUksR0FBRyxpQkFBaUI7UUFDM0QsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdCLElBQUksUUFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7WUFDdkUsT0FBTzs7OztpQkFJSSxJQUFJO21CQUNGLG1CQUFtQjtrQkFDcEIsa0JBQWtCOztZQUV4QixRQUFROztPQUViLENBQUM7U0FDSDtRQUNELE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7Q0FDRjtBQUVELGVBQWUsSUFBSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uICovXG4vLyBJY29ucyBzb3VyY2U6IGh0dHBzOi8vbWF0ZXJpYWwuaW8vXG5cbmltcG9ydCBib2xkIGZyb20gJy4vYm9sZCc7XG5pbXBvcnQgaXRhbGljIGZyb20gJy4vaXRhbGljJztcbmltcG9ydCBjb2RlIGZyb20gJy4vY29kZSc7XG5pbXBvcnQgdW5kZXJsaW5lIGZyb20gJy4vdW5kZXJsaW5lJztcbmltcG9ydCBzdHJpa2UgZnJvbSAnLi9zdHJpa2UnO1xuaW1wb3J0IG9yZGVyZWRMaXN0IGZyb20gJy4vb3JkZXJlZF9saXN0JztcbmltcG9ydCBidWxsZXRMaXN0IGZyb20gJy4vYnVsbGV0X2xpc3QnO1xuaW1wb3J0IHF1b3RlIGZyb20gJy4vcXVvdGUnO1xuaW1wb3J0IGxpbmsgZnJvbSAnLi9saW5rJztcbmltcG9ydCB1bmxpbmsgZnJvbSAnLi91bmxpbmsnO1xuaW1wb3J0IGltYWdlIGZyb20gJy4vaW1hZ2UnO1xuaW1wb3J0IGFsaWduTGVmdCBmcm9tICcuL2FsaWduX2xlZnQnO1xuaW1wb3J0IGFsaWduQ2VudGVyIGZyb20gJy4vYWxpZ25fY2VudGVyJztcbmltcG9ydCBhbGlnblJpZ2h0IGZyb20gJy4vYWxpZ25fcmlnaHQnO1xuaW1wb3J0IGFsaWduSnVzdGlmeSBmcm9tICcuL2FsaWduX2p1c3RpZnknO1xuaW1wb3J0IHRleHRDb2xvciBmcm9tICcuL3RleHRfY29sb3InO1xuaW1wb3J0IGNvbG9yRmlsbCBmcm9tICcuL2NvbG9yX2ZpbGwnO1xuaW1wb3J0IGhvcml6b250YWxSdWxlIGZyb20gJy4vaG9yaXpvbnRhbF9ydWxlJztcbmltcG9ydCBmb3JtYXRDbGVhciBmcm9tICcuL2Zvcm1hdF9jbGVhcic7XG5cbmNvbnN0IERFRkFVTFRfSUNPTl9IRUlHSFQgPSAyMDtcbmNvbnN0IERFRkFVTFRfSUNPTl9XSURUSCA9IDIwO1xuY29uc3QgREVGQVVMVF9JQ09OX0ZJTEwgPSAnY3VycmVudENvbG9yJztcblxuZXhwb3J0IGNvbnN0IGljb25zOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge1xuICBib2xkLFxuICBpdGFsaWMsXG4gIGNvZGUsXG4gIHVuZGVybGluZSxcbiAgc3RyaWtlLFxuICBvcmRlcmVkX2xpc3Q6IG9yZGVyZWRMaXN0LFxuICBidWxsZXRfbGlzdDogYnVsbGV0TGlzdCxcbiAgYmxvY2txdW90ZTogcXVvdGUsXG4gIGxpbmssXG4gIHVubGluayxcbiAgaW1hZ2UsXG4gIGFsaWduX2xlZnQ6IGFsaWduTGVmdCxcbiAgYWxpZ25fY2VudGVyOiBhbGlnbkNlbnRlcixcbiAgYWxpZ25fcmlnaHQ6IGFsaWduUmlnaHQsXG4gIGFsaWduX2p1c3RpZnk6IGFsaWduSnVzdGlmeSxcbiAgdGV4dF9jb2xvcjogdGV4dENvbG9yLFxuICBjb2xvcl9maWxsOiBjb2xvckZpbGwsXG4gIGhvcml6b250YWxfcnVsZTogaG9yaXpvbnRhbFJ1bGUsXG4gIGZvcm1hdF9jbGVhcjogZm9ybWF0Q2xlYXIsXG4gIHBhdGg6ICc8cGF0aD48L3BhdGg+Jyxcbn07XG5cbmV4cG9ydCB0eXBlIEljb25zS2V5cyA9IGtleW9mIHR5cGVvZiBpY29ucztcblxuY2xhc3MgSWNvbiB7XG4gIHN0YXRpYyBnZXQobmFtZToga2V5b2YgdHlwZW9mIGljb25zLCBmaWxsID0gREVGQVVMVF9JQ09OX0ZJTEwpOiBzdHJpbmcge1xuICAgIGNvbnN0IGZ1bGxQYXRoID0gaWNvbnNbbmFtZV07XG4gICAgaWYgKGZ1bGxQYXRoICYmIChmdWxsUGF0aC5pbmNsdWRlcygnPHBhdGgnKSB8fCBmdWxsUGF0aC5pbmNsdWRlcygnPGcnKSkpIHtcbiAgICAgIHJldHVybiBgXG4gICAgICAgIDxzdmdcbiAgICAgICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgICAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgICAgICAgICBmaWxsPSR7ZmlsbH1cbiAgICAgICAgICBoZWlnaHQ9JHtERUZBVUxUX0lDT05fSEVJR0hUfVxuICAgICAgICAgIHdpZHRoPSR7REVGQVVMVF9JQ09OX1dJRFRIfVxuICAgICAgICA+XG4gICAgICAgICAgJHtmdWxsUGF0aH1cbiAgICAgICAgPC9zdmc+XG4gICAgICBgO1xuICAgIH1cbiAgICByZXR1cm4gZnVsbFBhdGg7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSWNvbjtcbiJdfQ==